"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
exports.handler = async (event) => {
    console.log("request:", JSON.stringify(event));
    const headers = {
        "Access-Control-Allow-Headers": 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
        "Access-Control-Allow-Origin": '*',
        "Access-Control-Allow-Methods": '*'
    };
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    const id = event.pathParameters?.id;
    if (!id || !uuidRegex.test(id)) {
        return {
            statusCode: 400,
            headers,
            body: JSON.stringify({
                message: 'Invalid ID format. ID must be a UUID.'
            }),
        };
    }
    const client = new client_dynamodb_1.DynamoDBClient({});
    const dynamo = lib_dynamodb_1.DynamoDBDocumentClient.from(client);
    try {
        const productResult = await dynamo.send(new lib_dynamodb_1.GetCommand({
            TableName: 'products',
            Key: {
                id,
            }
        }));
        const product = productResult.Item;
        const stockResult = await dynamo.send(new lib_dynamodb_1.GetCommand({
            TableName: 'stocks',
            Key: {
                product_id: id
            }
        }));
        const stock = stockResult.Item;
        const joinedData = {
            ...product,
            count: stock?.count || 0
        };
        if (product) {
            const response = {
                statusCode: 200,
                headers,
                body: JSON.stringify(joinedData)
            };
            return response;
        }
        else {
            const response = {
                statusCode: 404,
                headers,
                body: JSON.stringify({ message: "Product not found" })
            };
            return response;
        }
    }
    catch (error) {
        console.error("Error fetching products from DynamoDB", error);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ message: "Internal Server Error" })
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UHJvZHVjdEJ5SWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnZXRQcm9kdWN0QnlJZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDhEQUEwRDtBQUMxRCx3REFBMkU7QUFJM0UsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBMkIsRUFBa0MsRUFBRTtJQUNwRixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDL0MsTUFBTSxPQUFPLEdBQUc7UUFDWiw4QkFBOEIsRUFBRSxzRUFBc0U7UUFDdEcsNkJBQTZCLEVBQUUsR0FBRztRQUNsQyw4QkFBOEIsRUFBRSxHQUFHO0tBQ3RDLENBQUE7SUFFRCxNQUFNLFNBQVMsR0FBRyxpRUFBaUUsQ0FBQztJQUNwRixNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQztJQUVwQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzdCLE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLE9BQU87WUFDUCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDakIsT0FBTyxFQUFFLHVDQUF1QzthQUNuRCxDQUFDO1NBQ0wsQ0FBQztJQUNOLENBQUM7SUFDRCxNQUFNLE1BQU0sR0FBRyxJQUFJLGdDQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEMsTUFBTSxNQUFNLEdBQUcscUNBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRW5ELElBQUksQ0FBQztRQUNELE1BQU0sYUFBYSxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FDbkMsSUFBSSx5QkFBVSxDQUFDO1lBQ1gsU0FBUyxFQUFFLFVBQVU7WUFDckIsR0FBRyxFQUFFO2dCQUNELEVBQUU7YUFDTDtTQUNKLENBQUMsQ0FDTCxDQUFBO1FBQ0QsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLElBQW1CLENBQUM7UUFFbEQsTUFBTSxXQUFXLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUNqQyxJQUFJLHlCQUFVLENBQUM7WUFDWCxTQUFTLEVBQUUsUUFBUTtZQUNuQixHQUFHLEVBQUU7Z0JBQ0QsVUFBVSxFQUFFLEVBQUU7YUFDakI7U0FDSixDQUFDLENBQ0wsQ0FBQTtRQUNELE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFpQixDQUFDO1FBRTVDLE1BQU0sVUFBVSxHQUFHO1lBQ2YsR0FBRyxPQUFPO1lBQ1YsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLElBQUksQ0FBQztTQUMzQixDQUFBO1FBRUQsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUNWLE1BQU0sUUFBUSxHQUFHO2dCQUNiLFVBQVUsRUFBRSxHQUFHO2dCQUNmLE9BQU87Z0JBQ1AsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO2FBQ25DLENBQUM7WUFDRixPQUFPLFFBQVEsQ0FBQztRQUNwQixDQUFDO2FBQU0sQ0FBQztZQUNKLE1BQU0sUUFBUSxHQUFHO2dCQUNiLFVBQVUsRUFBRSxHQUFHO2dCQUNmLE9BQU87Z0JBQ1AsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQzthQUN6RCxDQUFBO1lBQ0QsT0FBTyxRQUFRLENBQUM7UUFDcEIsQ0FBQztJQUNMLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM3RCxPQUFPO1lBQ0osVUFBVSxFQUFFLEdBQUc7WUFDZixPQUFPO1lBQ1AsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQztTQUM3RCxDQUFDO0lBQ04sQ0FBQztBQUNMLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUdhdGV3YXlQcm94eUV2ZW50LCBBUElHYXRld2F5UHJveHlSZXN1bHQgfSBmcm9tICdhd3MtbGFtYmRhJztcclxuaW1wb3J0IHsgRHluYW1vREJDbGllbnQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiXCI7XHJcbmltcG9ydCB7IER5bmFtb0RCRG9jdW1lbnRDbGllbnQsIEdldENvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvbGliLWR5bmFtb2RiXCI7XHJcbmltcG9ydCB7IFByb2R1Y3RUeXBlIH0gZnJvbSAnLi4vdHlwZXMvdHlwZVByb2R1Y3QnO1xyXG5pbXBvcnQgeyBTdG9ja1R5cGUgfSBmcm9tICcuLi90eXBlcy90eXBlU3RvY2snO1xyXG5cclxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudCk6IFByb21pc2U8QVBJR2F0ZXdheVByb3h5UmVzdWx0PiA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcInJlcXVlc3Q6XCIsIEpTT04uc3RyaW5naWZ5KGV2ZW50KSk7XHJcbiAgICBjb25zdCBoZWFkZXJzID0ge1xyXG4gICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiOiAnQ29udGVudC1UeXBlLFgtQW16LURhdGUsQXV0aG9yaXphdGlvbixYLUFwaS1LZXksWC1BbXotU2VjdXJpdHktVG9rZW4nLFxyXG4gICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCI6ICcqJyxcclxuICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcIjogJyonXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IHV1aWRSZWdleCA9IC9eWzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzAtOWEtZl17NH0tWzAtOWEtZl17NH0tWzAtOWEtZl17MTJ9JC9pO1xyXG4gICAgY29uc3QgaWQgPSBldmVudC5wYXRoUGFyYW1ldGVycz8uaWQ7XHJcblxyXG4gICAgaWYgKCFpZCB8fCAhdXVpZFJlZ2V4LnRlc3QoaWQpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxyXG4gICAgICAgICAgICBoZWFkZXJzLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBJRCBmb3JtYXQuIElEIG11c3QgYmUgYSBVVUlELidcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGNvbnN0IGNsaWVudCA9IG5ldyBEeW5hbW9EQkNsaWVudCh7fSk7XHJcbiAgICBjb25zdCBkeW5hbW8gPSBEeW5hbW9EQkRvY3VtZW50Q2xpZW50LmZyb20oY2xpZW50KTtcclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBwcm9kdWN0UmVzdWx0ID0gYXdhaXQgZHluYW1vLnNlbmQoXHJcbiAgICAgICAgICAgIG5ldyBHZXRDb21tYW5kKHtcclxuICAgICAgICAgICAgICAgIFRhYmxlTmFtZTogJ3Byb2R1Y3RzJyxcclxuICAgICAgICAgICAgICAgIEtleToge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSAgXHJcbiAgICAgICAgKVxyXG4gICAgICAgIGNvbnN0IHByb2R1Y3QgPSBwcm9kdWN0UmVzdWx0Lkl0ZW0gYXMgUHJvZHVjdFR5cGU7XHJcblxyXG4gICAgICAgIGNvbnN0IHN0b2NrUmVzdWx0ID0gYXdhaXQgZHluYW1vLnNlbmQoXHJcbiAgICAgICAgICAgIG5ldyBHZXRDb21tYW5kKHtcclxuICAgICAgICAgICAgICAgIFRhYmxlTmFtZTogJ3N0b2NrcycsXHJcbiAgICAgICAgICAgICAgICBLZXk6IHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0X2lkOiBpZFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSAgXHJcbiAgICAgICAgKVxyXG4gICAgICAgIGNvbnN0IHN0b2NrID0gc3RvY2tSZXN1bHQuSXRlbSBhcyBTdG9ja1R5cGU7XHJcblxyXG4gICAgICAgIGNvbnN0IGpvaW5lZERhdGEgPSB7XHJcbiAgICAgICAgICAgIC4uLnByb2R1Y3QsXHJcbiAgICAgICAgICAgIGNvdW50OiBzdG9jaz8uY291bnQgfHwgMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHByb2R1Y3QpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoam9pbmVkRGF0YSlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogNDA0LFxyXG4gICAgICAgICAgICAgICAgaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogXCJQcm9kdWN0IG5vdCBmb3VuZFwiIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgIH0gICBcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIHByb2R1Y3RzIGZyb20gRHluYW1vREJcIiwgZXJyb3IpO1xyXG4gICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXHJcbiAgICAgICAgICAgIGhlYWRlcnMsXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogXCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcIiB9KVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0iXX0=