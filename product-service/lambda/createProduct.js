"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const crypto_1 = require("crypto");
exports.handler = async (event) => {
    console.log("request:", JSON.stringify(event));
    const client = new client_dynamodb_1.DynamoDBClient({});
    const dynamo = lib_dynamodb_1.DynamoDBDocumentClient.from(client);
    const headers = {
        "Access-Control-Allow-Headers": 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
        "Access-Control-Allow-Origin": '*',
        "Access-Control-Allow-Methods": '*'
    };
    const invalidDataResponse = {
        statusCode: 400,
        headers,
        body: JSON.stringify({ message: "Product data is invalid" })
    };
    try {
        const requestBody = event.body;
        if (!requestBody) {
            return invalidDataResponse;
        }
        else {
            const parsedRequestBody = JSON.parse(requestBody);
            const { title, description, price, count } = parsedRequestBody;
            const incorrectFieldType = typeof title !== 'string' || typeof description !== 'string' || typeof price !== 'number' || typeof count !== 'number';
            const undeinedField = !title || !description || price === undefined || count === undefined;
            const requiredFields = ['title', 'description', 'price', 'count'];
            const hasAllRequiredFields = requiredFields.every(field => parsedRequestBody.hasOwnProperty(field));
            if (!hasAllRequiredFields || incorrectFieldType) {
                return invalidDataResponse;
            }
            const productId = (0, crypto_1.randomUUID)();
            await dynamo.send(new lib_dynamodb_1.PutCommand({
                TableName: 'products',
                Item: {
                    id: productId,
                    price,
                    title,
                    description
                },
            }));
            await dynamo.send(new lib_dynamodb_1.PutCommand({
                TableName: 'stocks',
                Item: {
                    product_id: productId,
                    count
                },
            }));
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify({ response: `Created item ${parsedRequestBody.title}` })
            };
        }
    }
    catch (error) {
        console.error("Error fetching products from DynamoDB", error);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ message: "Internal Server Error" })
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlUHJvZHVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNyZWF0ZVByb2R1Y3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw4REFBMEQ7QUFDMUQsd0RBQTJFO0FBQzNFLG1DQUFvQztBQUVwQyxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUEyQixFQUFrQyxFQUFFO0lBQ3BGLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUUvQyxNQUFNLE1BQU0sR0FBRyxJQUFJLGdDQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEMsTUFBTSxNQUFNLEdBQUcscUNBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRW5ELE1BQU0sT0FBTyxHQUFHO1FBQ1osOEJBQThCLEVBQUUsc0VBQXNFO1FBQ3RHLDZCQUE2QixFQUFFLEdBQUc7UUFDbEMsOEJBQThCLEVBQUUsR0FBRztLQUN0QyxDQUFDO0lBRUYsTUFBTSxtQkFBbUIsR0FBRztRQUN4QixVQUFVLEVBQUUsR0FBRztRQUNmLE9BQU87UUFDUCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxDQUFDO0tBQy9ELENBQUM7SUFFRixJQUFJLENBQUM7UUFDRCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQy9CLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNmLE9BQU8sbUJBQW1CLENBQUM7UUFDL0IsQ0FBQzthQUFNLENBQUM7WUFDSixNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUE7WUFDakQsTUFBTSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLGlCQUFpQixDQUFDO1lBQy9ELE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU8sV0FBVyxLQUFLLFFBQVEsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDO1lBQ2xKLE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsV0FBVyxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxLQUFLLFNBQVMsQ0FBQztZQUMzRixNQUFNLGNBQWMsR0FBRyxDQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sb0JBQW9CLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBRXBHLElBQUksQ0FBQyxvQkFBb0IsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO2dCQUM5QyxPQUFPLG1CQUFtQixDQUFDO1lBQy9CLENBQUM7WUFFRCxNQUFNLFNBQVMsR0FBRyxJQUFBLG1CQUFVLEdBQUUsQ0FBQztZQUUvQixNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQ2IsSUFBSSx5QkFBVSxDQUFDO2dCQUNYLFNBQVMsRUFBRSxVQUFVO2dCQUNyQixJQUFJLEVBQUU7b0JBQ0YsRUFBRSxFQUFFLFNBQVM7b0JBQ2IsS0FBSztvQkFDTCxLQUFLO29CQUNMLFdBQVc7aUJBQ2Q7YUFDSixDQUFDLENBQ0wsQ0FBQztZQUNGLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FDYixJQUFJLHlCQUFVLENBQUM7Z0JBQ1gsU0FBUyxFQUFFLFFBQVE7Z0JBQ25CLElBQUksRUFBRTtvQkFDRixVQUFVLEVBQUUsU0FBUztvQkFDckIsS0FBSztpQkFDUjthQUNKLENBQUMsQ0FDTCxDQUFDO1lBQ0YsT0FBTztnQkFDSCxVQUFVLEVBQUUsR0FBRztnQkFDZixPQUFPO2dCQUNQLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUMsUUFBUSxFQUFDLGdCQUFnQixpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsRUFBQyxDQUFDO2FBQzdFLENBQUM7UUFDTixDQUFDO0lBQ0wsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzlELE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLE9BQU87WUFDUCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxDQUFDO1NBQzdELENBQUM7SUFDTixDQUFDO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5RXZlbnQsIEFQSUdhdGV3YXlQcm94eVJlc3VsdCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xyXG5pbXBvcnQgeyBEeW5hbW9EQkNsaWVudCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtZHluYW1vZGJcIjtcclxuaW1wb3J0IHsgRHluYW1vREJEb2N1bWVudENsaWVudCwgUHV0Q29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9saWItZHluYW1vZGJcIjtcclxuaW1wb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gJ2NyeXB0byc7XHJcblxyXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFQSUdhdGV3YXlQcm94eUV2ZW50KTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+ID0+IHtcclxuICAgIGNvbnNvbGUubG9nKFwicmVxdWVzdDpcIiwgSlNPTi5zdHJpbmdpZnkoZXZlbnQpKTtcclxuXHJcbiAgICBjb25zdCBjbGllbnQgPSBuZXcgRHluYW1vREJDbGllbnQoe30pO1xyXG4gICAgY29uc3QgZHluYW1vID0gRHluYW1vREJEb2N1bWVudENsaWVudC5mcm9tKGNsaWVudCk7XHJcblxyXG4gICAgY29uc3QgaGVhZGVycyA9IHtcclxuICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnNcIjogJ0NvbnRlbnQtVHlwZSxYLUFtei1EYXRlLEF1dGhvcml6YXRpb24sWC1BcGktS2V5LFgtQW16LVNlY3VyaXR5LVRva2VuJyxcclxuICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiOiAnKicsXHJcbiAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzXCI6ICcqJ1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBpbnZhbGlkRGF0YVJlc3BvbnNlID0ge1xyXG4gICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcclxuICAgICAgICBoZWFkZXJzLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogXCJQcm9kdWN0IGRhdGEgaXMgaW52YWxpZFwiIH0pXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0gZXZlbnQuYm9keTtcclxuICAgICAgICBpZiAoIXJlcXVlc3RCb2R5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnZhbGlkRGF0YVJlc3BvbnNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZFJlcXVlc3RCb2R5ID0gSlNPTi5wYXJzZShyZXF1ZXN0Qm9keSlcclxuICAgICAgICAgICAgY29uc3QgeyB0aXRsZSwgZGVzY3JpcHRpb24sIHByaWNlLCBjb3VudCB9ID0gcGFyc2VkUmVxdWVzdEJvZHk7XHJcbiAgICAgICAgICAgIGNvbnN0IGluY29ycmVjdEZpZWxkVHlwZSA9IHR5cGVvZiB0aXRsZSAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIGRlc2NyaXB0aW9uICE9PSAnc3RyaW5nJyB8fCB0eXBlb2YgcHJpY2UgIT09ICdudW1iZXInIHx8IHR5cGVvZiBjb3VudCAhPT0gJ251bWJlcic7XHJcbiAgICAgICAgICAgIGNvbnN0IHVuZGVpbmVkRmllbGQgPSAhdGl0bGUgfHwgIWRlc2NyaXB0aW9uIHx8IHByaWNlID09PSB1bmRlZmluZWQgfHwgY291bnQgPT09IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgY29uc3QgcmVxdWlyZWRGaWVsZHMgPSBbJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ3ByaWNlJywgJ2NvdW50J107XHJcbiAgICAgICAgICAgIGNvbnN0IGhhc0FsbFJlcXVpcmVkRmllbGRzID0gcmVxdWlyZWRGaWVsZHMuZXZlcnkoZmllbGQgPT4gcGFyc2VkUmVxdWVzdEJvZHkuaGFzT3duUHJvcGVydHkoZmllbGQpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICghaGFzQWxsUmVxdWlyZWRGaWVsZHMgfHwgaW5jb3JyZWN0RmllbGRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW52YWxpZERhdGFSZXNwb25zZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgcHJvZHVjdElkID0gcmFuZG9tVVVJRCgpO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgZHluYW1vLnNlbmQoXHJcbiAgICAgICAgICAgICAgICBuZXcgUHV0Q29tbWFuZCh7XHJcbiAgICAgICAgICAgICAgICAgICAgVGFibGVOYW1lOiAncHJvZHVjdHMnLFxyXG4gICAgICAgICAgICAgICAgICAgIEl0ZW06IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHByb2R1Y3RJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBhd2FpdCBkeW5hbW8uc2VuZChcclxuICAgICAgICAgICAgICAgIG5ldyBQdXRDb21tYW5kKHtcclxuICAgICAgICAgICAgICAgICAgICBUYWJsZU5hbWU6ICdzdG9ja3MnLFxyXG4gICAgICAgICAgICAgICAgICAgIEl0ZW06IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdF9pZDogcHJvZHVjdElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtyZXNwb25zZTpgQ3JlYXRlZCBpdGVtICR7cGFyc2VkUmVxdWVzdEJvZHkudGl0bGV9YH0pXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgcHJvZHVjdHMgZnJvbSBEeW5hbW9EQlwiLCBlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3RhdHVzQ29kZTogNTAwLFxyXG4gICAgICAgICAgICBoZWFkZXJzLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6IFwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIgfSlcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59Il19