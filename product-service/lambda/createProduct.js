"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const crypto_1 = require("crypto");
exports.handler = async (event) => {
    console.log("request:", JSON.stringify(event));
    const client = new client_dynamodb_1.DynamoDBClient({});
    const dynamo = lib_dynamodb_1.DynamoDBDocumentClient.from(client);
    const headers = {
        "Access-Control-Allow-Headers": 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
        "Access-Control-Allow-Origin": '*',
        "Access-Control-Allow-Methods": '*'
    };
    const invalidDataResponse = {
        statusCode: 400,
        headers,
        body: JSON.stringify({ message: "Product data is invalid" })
    };
    try {
        const requestBody = event.body;
        if (!requestBody) {
            return invalidDataResponse;
        }
        else {
            const parsedRequestBody = JSON.parse(requestBody);
            const { title, description, price, count } = parsedRequestBody;
            const incorrectFieldType = typeof title !== 'string' || typeof description !== 'string' || typeof price !== 'number' || typeof count !== 'number';
            const undeinedField = !title || !description || price === undefined || count === undefined;
            if (undeinedField || incorrectFieldType) {
                return invalidDataResponse;
            }
            const productId = (0, crypto_1.randomUUID)();
            await dynamo.send(new lib_dynamodb_1.PutCommand({
                TableName: 'products',
                Item: {
                    id: productId,
                    price,
                    title,
                    description
                },
            }));
            await dynamo.send(new lib_dynamodb_1.PutCommand({
                TableName: 'stocks',
                Item: {
                    product_id: productId,
                    count
                },
            }));
            return {
                statusCode: 200,
                headers,
                body: `Created item ${parsedRequestBody.title}`
            };
        }
    }
    catch (error) {
        console.error("Error fetching products from DynamoDB", error);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ message: "Internal Server Error" })
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlUHJvZHVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNyZWF0ZVByb2R1Y3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw4REFBMEQ7QUFDMUQsd0RBQTJFO0FBRTNFLG1DQUFvQztBQUVwQyxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUEyQixFQUFrQyxFQUFFO0lBQ3BGLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUUvQyxNQUFNLE1BQU0sR0FBRyxJQUFJLGdDQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEMsTUFBTSxNQUFNLEdBQUcscUNBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRW5ELE1BQU0sT0FBTyxHQUFHO1FBQ1osOEJBQThCLEVBQUUsc0VBQXNFO1FBQ3RHLDZCQUE2QixFQUFFLEdBQUc7UUFDbEMsOEJBQThCLEVBQUUsR0FBRztLQUN0QyxDQUFDO0lBRUYsTUFBTSxtQkFBbUIsR0FBRztRQUN4QixVQUFVLEVBQUUsR0FBRztRQUNmLE9BQU87UUFDUCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxDQUFDO0tBQy9ELENBQUM7SUFFRixJQUFJLENBQUM7UUFDRCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQy9CLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNmLE9BQU8sbUJBQW1CLENBQUM7UUFDL0IsQ0FBQzthQUFNLENBQUM7WUFDSixNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUE7WUFDakQsTUFBTSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLGlCQUFpQixDQUFDO1lBQy9ELE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU8sV0FBVyxLQUFLLFFBQVEsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDO1lBQ2xKLE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsV0FBVyxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxLQUFLLFNBQVMsQ0FBQztZQUUzRixJQUFJLGFBQWEsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO2dCQUN0QyxPQUFPLG1CQUFtQixDQUFDO1lBQy9CLENBQUM7WUFFRCxNQUFNLFNBQVMsR0FBRyxJQUFBLG1CQUFVLEdBQUUsQ0FBQztZQUUvQixNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQ2IsSUFBSSx5QkFBVSxDQUFDO2dCQUNYLFNBQVMsRUFBRSxVQUFVO2dCQUNyQixJQUFJLEVBQUU7b0JBQ0YsRUFBRSxFQUFFLFNBQVM7b0JBQ2IsS0FBSztvQkFDTCxLQUFLO29CQUNMLFdBQVc7aUJBQ2Q7YUFDSixDQUFDLENBQ0wsQ0FBQztZQUNGLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FDYixJQUFJLHlCQUFVLENBQUM7Z0JBQ1gsU0FBUyxFQUFFLFFBQVE7Z0JBQ25CLElBQUksRUFBRTtvQkFDRixVQUFVLEVBQUUsU0FBUztvQkFDckIsS0FBSztpQkFDUjthQUNKLENBQUMsQ0FDTCxDQUFDO1lBQ0YsT0FBTztnQkFDSCxVQUFVLEVBQUUsR0FBRztnQkFDZixPQUFPO2dCQUNQLElBQUksRUFBRSxnQkFBZ0IsaUJBQWlCLENBQUMsS0FBSyxFQUFFO2FBQ2xELENBQUM7UUFDTixDQUFDO0lBQ0wsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzlELE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLE9BQU87WUFDUCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxDQUFDO1NBQzdELENBQUM7SUFDTixDQUFDO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5RXZlbnQsIEFQSUdhdGV3YXlQcm94eVJlc3VsdCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xyXG5pbXBvcnQgeyBEeW5hbW9EQkNsaWVudCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtZHluYW1vZGJcIjtcclxuaW1wb3J0IHsgRHluYW1vREJEb2N1bWVudENsaWVudCwgUHV0Q29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9saWItZHluYW1vZGJcIjtcclxuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XHJcbmltcG9ydCB7IHJhbmRvbVVVSUQgfSBmcm9tICdjcnlwdG8nO1xyXG5cclxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudCk6IFByb21pc2U8QVBJR2F0ZXdheVByb3h5UmVzdWx0PiA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcInJlcXVlc3Q6XCIsIEpTT04uc3RyaW5naWZ5KGV2ZW50KSk7XHJcblxyXG4gICAgY29uc3QgY2xpZW50ID0gbmV3IER5bmFtb0RCQ2xpZW50KHt9KTtcclxuICAgIGNvbnN0IGR5bmFtbyA9IER5bmFtb0RCRG9jdW1lbnRDbGllbnQuZnJvbShjbGllbnQpO1xyXG5cclxuICAgIGNvbnN0IGhlYWRlcnMgPSB7XHJcbiAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCI6ICdDb250ZW50LVR5cGUsWC1BbXotRGF0ZSxBdXRob3JpemF0aW9uLFgtQXBpLUtleSxYLUFtei1TZWN1cml0eS1Ub2tlbicsXHJcbiAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIjogJyonLFxyXG4gICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kc1wiOiAnKidcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaW52YWxpZERhdGFSZXNwb25zZSA9IHtcclxuICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXHJcbiAgICAgICAgaGVhZGVycyxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6IFwiUHJvZHVjdCBkYXRhIGlzIGludmFsaWRcIiB9KVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXF1ZXN0Qm9keSA9IGV2ZW50LmJvZHk7XHJcbiAgICAgICAgaWYgKCFyZXF1ZXN0Qm9keSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW52YWxpZERhdGFSZXNwb25zZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJzZWRSZXF1ZXN0Qm9keSA9IEpTT04ucGFyc2UocmVxdWVzdEJvZHkpXHJcbiAgICAgICAgICAgIGNvbnN0IHsgdGl0bGUsIGRlc2NyaXB0aW9uLCBwcmljZSwgY291bnQgfSA9IHBhcnNlZFJlcXVlc3RCb2R5O1xyXG4gICAgICAgICAgICBjb25zdCBpbmNvcnJlY3RGaWVsZFR5cGUgPSB0eXBlb2YgdGl0bGUgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiBkZXNjcmlwdGlvbiAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIHByaWNlICE9PSAnbnVtYmVyJyB8fCB0eXBlb2YgY291bnQgIT09ICdudW1iZXInO1xyXG4gICAgICAgICAgICBjb25zdCB1bmRlaW5lZEZpZWxkID0gIXRpdGxlIHx8ICFkZXNjcmlwdGlvbiB8fCBwcmljZSA9PT0gdW5kZWZpbmVkIHx8IGNvdW50ID09PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodW5kZWluZWRGaWVsZCB8fCBpbmNvcnJlY3RGaWVsZFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbnZhbGlkRGF0YVJlc3BvbnNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwcm9kdWN0SWQgPSByYW5kb21VVUlEKCk7XHJcblxyXG4gICAgICAgICAgICBhd2FpdCBkeW5hbW8uc2VuZChcclxuICAgICAgICAgICAgICAgIG5ldyBQdXRDb21tYW5kKHtcclxuICAgICAgICAgICAgICAgICAgICBUYWJsZU5hbWU6ICdwcm9kdWN0cycsXHJcbiAgICAgICAgICAgICAgICAgICAgSXRlbToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogcHJvZHVjdElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmljZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGF3YWl0IGR5bmFtby5zZW5kKFxyXG4gICAgICAgICAgICAgICAgbmV3IFB1dENvbW1hbmQoe1xyXG4gICAgICAgICAgICAgICAgICAgIFRhYmxlTmFtZTogJ3N0b2NrcycsXHJcbiAgICAgICAgICAgICAgICAgICAgSXRlbToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0X2lkOiBwcm9kdWN0SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzLCBcclxuICAgICAgICAgICAgICAgIGJvZHk6IGBDcmVhdGVkIGl0ZW0gJHtwYXJzZWRSZXF1ZXN0Qm9keS50aXRsZX1gXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgcHJvZHVjdHMgZnJvbSBEeW5hbW9EQlwiLCBlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3RhdHVzQ29kZTogNTAwLFxyXG4gICAgICAgICAgICBoZWFkZXJzLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6IFwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIgfSlcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59Il19