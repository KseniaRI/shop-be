"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const crypto_1 = require("crypto");
exports.handler = async (event) => {
    console.log("request", JSON.stringify(event));
    const products = event.Records.flatMap(record => JSON.parse(record.body));
    console.log('products from sqs:', products);
    const client = new client_dynamodb_1.DynamoDBClient({});
    const dynamo = lib_dynamodb_1.DynamoDBDocumentClient.from(client);
    for (const product of products) {
        const { title, description, price, count } = product;
        console.log('title', title);
        try {
            const productId = (0, crypto_1.randomUUID)();
            const transactionCommand = new lib_dynamodb_1.TransactWriteCommand({
                TransactItems: [
                    {
                        Put: {
                            TableName: process.env.PRODUCTS_TABLE_NAME,
                            Item: {
                                id: productId,
                                price,
                                title,
                                description
                            }
                        }
                    },
                    {
                        Put: {
                            TableName: process.env.STOCKS_TABLE_NAME,
                            Item: {
                                product_id: productId,
                                count
                            }
                        }
                    }
                ]
            });
            const transactionItems = transactionCommand.input.TransactItems;
            console.log('transactionItems', transactionItems);
            const result = await dynamo.send(transactionCommand);
            console.log('transactionResult', result.$metadata.httpStatusCode);
        }
        catch (error) {
            console.log('Error of writing parsed csv to db', error);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2F0YWxvZ0JhdGNoUHJvY2Vzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhdGFsb2dCYXRjaFByb2Nlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSw4REFBMEQ7QUFDMUQsd0RBQXFGO0FBQ3JGLG1DQUFvQztBQUVwQyxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFlLEVBQUUsRUFBRTtJQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDOUMsTUFBTSxRQUFRLEdBQXFCLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM1RixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRTVDLE1BQU0sTUFBTSxHQUFHLElBQUksZ0NBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0QyxNQUFNLE1BQU0sR0FBRyxxQ0FBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFbkQsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUM3QixNQUFNLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQ3JELE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQzNCLElBQUksQ0FBQztZQUNELE1BQU0sU0FBUyxHQUFHLElBQUEsbUJBQVUsR0FBRSxDQUFDO1lBRS9CLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxtQ0FBb0IsQ0FBQztnQkFDaEQsYUFBYSxFQUFFO29CQUNYO3dCQUNJLEdBQUcsRUFBRTs0QkFDRCxTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUI7NEJBQzFDLElBQUksRUFBRTtnQ0FDRixFQUFFLEVBQUUsU0FBUztnQ0FDYixLQUFLO2dDQUNMLEtBQUs7Z0NBQ0wsV0FBVzs2QkFDZDt5QkFDSjtxQkFDSjtvQkFDRDt3QkFDSSxHQUFHLEVBQUU7NEJBQ0QsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCOzRCQUN4QyxJQUFJLEVBQUU7Z0NBQ0YsVUFBVSxFQUFFLFNBQVM7Z0NBQ3JCLEtBQUs7NkJBQ1I7eUJBQ0o7cUJBQ0o7aUJBQ0o7YUFDSixDQUFDLENBQUM7WUFDSCxNQUFNLGdCQUFnQixHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUE7WUFDL0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFBO1lBQ2pELE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3JELE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUNyRSxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUNBQW1DLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUQsQ0FBQztJQUNMLENBQUM7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTUVNFdmVudCB9IGZyb20gXCJhd3MtbGFtYmRhXCI7XHJcbmltcG9ydCB7IFByb2R1Y3RGcm9tQ1NWIH0gZnJvbSBcIi4uL3R5cGVzL3R5cGVQcm9kdWN0RnJvbUNTVlwiO1xyXG5pbXBvcnQgeyBEeW5hbW9EQkNsaWVudCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtZHluYW1vZGJcIjtcclxuaW1wb3J0IHsgRHluYW1vREJEb2N1bWVudENsaWVudCwgVHJhbnNhY3RXcml0ZUNvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvbGliLWR5bmFtb2RiXCI7XHJcbmltcG9ydCB7IHJhbmRvbVVVSUQgfSBmcm9tICdjcnlwdG8nO1xyXG5cclxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBTUVNFdmVudCkgPT4geyBcclxuICAgIGNvbnNvbGUubG9nKFwicmVxdWVzdFwiLCBKU09OLnN0cmluZ2lmeShldmVudCkpO1xyXG4gICAgY29uc3QgcHJvZHVjdHM6IFByb2R1Y3RGcm9tQ1NWW10gPSBldmVudC5SZWNvcmRzLmZsYXRNYXAocmVjb3JkID0+IEpTT04ucGFyc2UocmVjb3JkLmJvZHkpKTtcclxuICAgIGNvbnNvbGUubG9nKCdwcm9kdWN0cyBmcm9tIHNxczonLCBwcm9kdWN0cyk7XHJcblxyXG4gICAgY29uc3QgY2xpZW50ID0gbmV3IER5bmFtb0RCQ2xpZW50KHt9KTtcclxuICAgIGNvbnN0IGR5bmFtbyA9IER5bmFtb0RCRG9jdW1lbnRDbGllbnQuZnJvbShjbGllbnQpO1xyXG5cclxuICAgIGZvciAoY29uc3QgcHJvZHVjdCBvZiBwcm9kdWN0cykge1xyXG4gICAgICAgIGNvbnN0IHsgdGl0bGUsIGRlc2NyaXB0aW9uLCBwcmljZSwgY291bnQgfSA9IHByb2R1Y3Q7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3RpdGxlJywgdGl0bGUpXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcHJvZHVjdElkID0gcmFuZG9tVVVJRCgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25Db21tYW5kID0gbmV3IFRyYW5zYWN0V3JpdGVDb21tYW5kKHtcclxuICAgICAgICAgICAgICAgIFRyYW5zYWN0SXRlbXM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFB1dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5QUk9EVUNUU19UQUJMRV9OQU1FLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSXRlbToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwcm9kdWN0SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQdXQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuU1RPQ0tTX1RBQkxFX05BTUUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJdGVtOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdF9pZDogcHJvZHVjdElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbkl0ZW1zID0gdHJhbnNhY3Rpb25Db21tYW5kLmlucHV0LlRyYW5zYWN0SXRlbXNcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3RyYW5zYWN0aW9uSXRlbXMnLCB0cmFuc2FjdGlvbkl0ZW1zKVxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkeW5hbW8uc2VuZCh0cmFuc2FjdGlvbkNvbW1hbmQpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygndHJhbnNhY3Rpb25SZXN1bHQnLCByZXN1bHQuJG1ldGFkYXRhLmh0dHBTdGF0dXNDb2RlKVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBvZiB3cml0aW5nIHBhcnNlZCBjc3YgdG8gZGInLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19